
server {
    listen 80;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri/;
    }
}

server {
    include /etc/nginx/mime.types;
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.pem;
    ssl_certificate_key /etc/ssl/key.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;

	root /atabiti/wordpress;
    index  index.php index.html index.htm;

    client_max_body_size 500M;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location ~ .php$ {
        try_files $uri =404;
        fastcgi_pass wordpress:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}

# server {
#     listen 443 ssl default_server;
#     ssl_certificate /etc/ssl/certificate.pem;
#     ssl_certificate_key /etc/ssl/key.pem;
#     # server_name atabiti.42.fr;
# 	# return 301 https://$host$request_uri;
#     # ssl_protocols TLSv1.3;
# 	#index - We define index.php as one of the default files to look for if no file is specified in the URI
# 	index index.php;
	
# 	root /atabiti/wordpress;
# 	# location ~ \.php$
# 	# {
# 	# 	include snippets/fastcgi-php.conf;
# 	# 	 # path of poolâ€™s socket 
# 	# 	fastcgi_pass wordpress:9000;
# 	# 	fastcgi_read_timeout 300;
# 	# }
# 	   location ~ \.php$ {

#         include fastcgi_params;
# 	fastcgi_pass wordpress:9000;
#         fastcgi_index index.php;
#         fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
#     }
# }

#MANUAL
#Sets the address and port for IP, ... on which the server will accept requests.
# Both address and port, or only address or only port can be specified. An address may also be a hostname
#makes nginx listen on all ipv4 address on the server, on port 443
#The included snippets/fastcgi-php.conf configuration takes care of parsing out /foo/bar as the intended URI that the PHP application uses as a route.
#location { try_files ... } - We use the standard try_files directive in a block that catches all URI's. This looks to see if a file or directory sent in the URI 
#exists within the root directory. If it does not exist, it goes to the index.php file, which we know for sure is in the root directory.